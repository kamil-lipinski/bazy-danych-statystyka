drop table COUNTRIES cascade constraints PURGE;
drop table DEPARTMENTS cascade constraints PURGE;
drop table EMPLOYEES cascade constraints PURGE;
drop table JOB_HISTORY cascade constraints PURGE;
drop table JOBS cascade constraints PURGE;
drop table LOCATIONS cascade constraints PURGE;
drop table REGIONS cascade constraints PURGE;

CREATE TABLE COUNTRIES AS (SELECT * FROM HR.COUNTRIES);
CREATE TABLE DEPARTMENTS AS (SELECT * FROM HR.DEPARTMENTS);
CREATE TABLE EMPLOYEES AS (SELECT * FROM HR.EMPLOYEES);
CREATE TABLE JOB_HISTORY AS (SELECT * FROM HR.JOB_HISTORY);
CREATE TABLE JOBS AS (SELECT * FROM HR.JOBS);
CREATE TABLE LOCATIONS AS (SELECT * FROM HR.LOCATIONS);
CREATE TABLE REGIONS AS (SELECT * FROM HR.REGIONS);

/* 1. Z tabeli employees wypisz w jednej kolumnie nazwisko i zarobki – nazwij kolumnę
wynagrodzenie, dla osób z departamentów 20 i 50 z zarobkami pomiędzy 2000 a
7000, uporządkuj kolumny według nazwiska */

SELECT last_name || ' ' || salary AS wynagrodzenie FROM employees
WHERE department_id IN(20, 50) AND salary BETWEEN 2000 AND 7000 ORDER BY last_name;

/* 2. Z tabeli employees wyciągnąć informację data zatrudnienia, nazwisko oraz kolumnę
podaną przez użytkownika dla osób mających menadżera zatrudnionych w roku 2005.
Uporządkować według kolumny podanej przez użytkownika */

SELECT hire_date, last_name, &podaj_kolumne FROM employees
WHERE manager_id IN (SELECT employee_id FROM employees WHERE EXTRACT(YEAR FROM hire_date) = 2005 )

/* 3. Wypisać imiona i nazwiska razem, zarobki oraz numer telefonu porządkując dane
według pierwszej kolumny malejąco a następnie drugiej rosnąco (użyć numerów do
porządkowania) dla osób z trzecią literą nazwiska ‘e’ oraz częścią imienia podaną
przez użytkownika */

SELECT first_name || ' ' || last_name AS imię_i_nazwisko, salary, phone_number
FROM employees WHERE SUBSTR(last_name, 3, 1) = 'e' AND first_name LIKE '%&podaj_czesc_imienia%'
ORDER BY 1 DESC, 2;

/* 4. Wypisać imię i nazwisko, liczbę miesięcy przepracowanych – funkcje
months_between oraz round oraz kolumnę wysokość_dodatku jako (użyć CASE lub DECODE):
10% wynagrodzenia dla liczby miesięcy do 150
20% wynagrodzenia dla liczby miesięcy od 150 do 200
30% wynagrodzenia dla liczby miesięcy od 200 */

SELECT first_name, last_name, ROUND(months_between(CURRENT_TIMESTAMP, hire_date), 0) 
AS liczba_miesiecy,
CASE 
    WHEN ROUND(months_between(CURRENT_TIMESTAMP, hire_date), 0) <= 150 THEN 0.1 * salary
    WHEN ROUND(months_between(CURRENT_TIMESTAMP, hire_date), 0) <= 200 THEN 0.2 * salary
    ELSE 0.3 * salary
END as wysokosc_dodatku
FROM employees;

/* 5. Dla każdego działów w których minimalna płaca jest wyższa niż 5000 wypisz sumę
oraz średnią zarobków zaokrągloną do całości nazwij odpowiednio kolumny */

SELECT departments.department_name,
SUM(employees.salary) AS suma_zarobkow, 
ROUND(AVG(employees.salary), 0) AS srednia_zarobkow
FROM departments
JOIN employees ON departments.department_id = employees.department_id
JOIN jobs ON employees.job_id = jobs.job_id 
WHERE jobs.min_salary > 5000 GROUP BY departments.department_name;

/* 6. Wypisać nazwisko, numer departamentu, nazwę departamentu, id pracy,
dla osób z pracujących Toronto */

SELECT employees.last_name, departments.department_id, departments.department_name,
employees.job_id FROM employees
JOIN departments ON employees.department_id = departments.department_id
JOIN locations ON departments.location_id = locations.location_id
WHERE locations.city = 'Toronto';

/* 7. Dla pracowników o imieniu „Jennifer” wypisz imię i nazwisko tego
pracownika oraz osoby które z nim współpracują */

SELECT e1.first_name, e1.last_name, e2.first_name AS coworker_first_name, e2.last_name AS coworker_last_name
FROM employees e1 JOIN employees e2 ON e1.department_id = e2.department_id
WHERE e1.first_name = 'Jennifer' AND e2.employee_id != e1.employee_id;

/* 8. Wypisać wszystkie departamenty w których nie ma pracowników */

SELECT departments.department_name FROM departments 
LEFT JOIN employees ON employees.department_id = departments.department_id 
WHERE employees.employee_id IS NULL;

/* 9. Skopiuj tabelę Job_grades od użytkownika HR */

CREATE TABLE JOB_GRADES AS (SELECT * FROM HR.JOB_GRADES);

/* 10. Wypisz imię i nazwisko, id pracy, nazwę departamentu, zarobki,
oraz odpowiedni grade dla każdego pracownika */

SELECT employees.first_name, employees.last_name, employees.job_id, departments.department_name, employees.salary,
(SELECT job_grades.grade FROM job_grades WHERE employees.salary BETWEEN job_grades.min_salary AND job_grades.max_salary) AS Grade
FROM employees JOIN departments ON departments.department_id = employees.department_id;

/* 11. Wypisz imię nazwisko oraz zarobki dla osób które zarabiają więcej niż 
średnia wszystkich, uporządkuj malejąco według zarobków */

SELECT employees.first_name, employees.last_name, employees.salary FROM employees
WHERE employees.salary > (SELECT ROUND(AVG(employees.salary), 0) FROM employees)
ORDER BY employees.salary desc;

/* 12. Wypisz id imie i nazwisko osób, które pracują w departamencie z 
osobami mającymi w nazwisku „u” */

SELECT employees.employee_id, employees.first_name, employees.last_name FROM employees
WHERE employees.department_id IN (SELECT UNIQUE departments.department_id 
FROM departments JOIN employees ON employees.department_id = departments.department_id
WHERE employees.employee_id IN (SELECT employee_id FROM employees WHERE last_name LIKE '%u%'));




